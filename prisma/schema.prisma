// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE___PRISMA_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id                   BigInt     @id @default(autoincrement())
  handle               String      @unique
  name                 String
  avatar               String?
  bio                  String?
  has_custom_timelines Boolean   @default(false)
  url                  String?
  verified             Boolean   @default(false)
  following            Follow[]  @relation("Following")
  followers            Follow[]  @relation("Followers")
  tweets               Tweet[]   @relation(name: "AuthorTweets")
  retweets             Retweet[]
  likes                Like[]
}

model Follow {
  id                Int      @id @default(autoincrement())
  follower          Author   @relation("Followers", fields: [follower_id], references: [id])
  follower_id       BigInt
  following         Author   @relation("Following", fields: [following_id], references: [id])
  following_id      BigInt
  created_at        DateTime @default(now())
}


model Tweet {
  id                String    @id @default(cuid())
  content           String
  quote_count       Int       @default(0)
  reply_count       Int       @default(0)
  repost_count      Int       @default(0)
  favorite_count    Int       @default(0)
  bookmark_count    Int       @default(0)
  timestamp         DateTime  @default(now())
  author            Author    @relation(name: "AuthorTweets", fields: [author_id], references: [id])
  author_id         BigInt
  intent            String
  is_pinned         Boolean   @default(false)
  is_quote_tweet    Boolean   
  is_reply_tweet    Boolean   
  liked_by          Like[]
  retweeted_by      Retweet[] 

  // **** Parent tweet *****
  // **** If this tweet is a reply, this is the ID of the parent tweet 
  // *** (the tweet being replied to) *****
  reply_parent_id   String? 
  reply_parent      Tweet?    @relation("Replies", fields: [reply_parent_id], references: [id])

  // **** Replies to this tweet *****
  // **** This is a reverse graph, when other tweets are replies to this tweet *****
  replies           Tweet[]   @relation("Replies")

  // **** If this tweet is a quote, this is the ID of the parent tweet
  // *** (the tweet being quoted) *****
  quote_parent_id   String?
  quote_parent      Tweet?   @relation("Quotes", fields: [quote_parent_id], references: [id])

  // **** Quotes to this tweet *****
  // **** This is a reverse graph, when other tweets have quoted this tweet *****
  quotes            Tweet[]   @relation("Quotes")
}

model Retweet {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  // **** State of the original tweet when retweeted *****
  origin_state    String      
  author          Author      @relation(fields: [author_id], references: [id])
  author_id       BigInt
  tweet           Tweet       @relation(fields: [tweet_id], references: [id]) // Link to Tweet
  tweet_id        String
}


model Like {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  origin_state    String     // State of the original tweet when liked
  author          Author      @relation(fields: [author_id], references: [id])
  author_id       BigInt
  tweet           Tweet       @relation(fields: [tweet_id], references: [id]) // Link to Tweet
  tweet_id        String
}
