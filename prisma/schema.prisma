// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id                   String      @id @default(cuid())
  handle               String      @unique
  name                 String
  avatar               String?
  bio                  String?
  has_custom_timelines Boolean   @default(false)
  url                  String?
  verified             Boolean   @default(false)
  following            Follow[]  @relation("Following")
  followers            Follow[]  @relation("Followers")
  tweets               Tweet[]   @relation(name: "AuthorTweets")
  retweets             Retweet[]
  likes                Like[]
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    Author   @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   Author   @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now()) // Optional: timestamp of when the follow occurred
}

model Tweet {
  id              String    @id @default(cuid())
  content         String
  quote_count     Int
  reply_count     Int
  repost_count    Int
  favorite_count  Int
  bookmark_count  Int
  timestamp       DateTime
  author          Author    @relation(name: "AuthorTweets", fields: [authorId], references: [id])
  authorId        String
  type            String
  is_pinned       Boolean
  is_quote_tweet  Boolean
  is_retweet      Boolean
  parentId        String? // ID of the parent tweet, if this tweet is a reply
  parent          Tweet?    @relation("Replies", fields: [parentId], references: [id])
  replies         Tweet[]   @relation("Replies")
  originalTweet   Tweet?    @relation("Retweets", fields: [originalTweetId], references: [id])
  originalTweetId String?
  retweets        Tweet[]   @relation("Retweets")
  likedBy         Like[]
  Retweet         Retweet[]
}

model Retweet {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  originalState String // State of the original tweet when retweeted
  author        Author   @relation(fields: [authorId], references: [id])
  authorId      String
  tweet         Tweet    @relation(fields: [tweetId], references: [id])
  tweetId       String
}

model Like {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  originalState String // State of the original tweet when liked
  author        Author   @relation(fields: [authorId], references: [id])
  authorId      String
  tweet         Tweet    @relation(fields: [tweetId], references: [id])
  tweetId       String
}
